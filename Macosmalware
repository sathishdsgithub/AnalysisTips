================================================================================================

Codesigned by a developer 

$ codesign -dvvvv -r - UnpackNw.app/

================================================================================================
 Find out if the developer’s certificate is still valid or whether it’s been revoked by Apple:
 
 $ spctl --verbose=4 --assess --type execute UnpackNw.app
UnpackNw.app: accepted
source=Developer ID
 
 If the file’s code signature is no longer accepted, you’ll see CSSMERR_TP_CERT_REVOKED in the output. In this case, the certificate is accepted.

================================================================================================
The Info.plist can contain useful information about the application’s capabilities.
We use plutil with the -p switch to read them on the command line.

 $ plutil -p Info.plist 
 
 ================================================================================================
 
 Verify the content of the Resource folder
 
   file unpack.txt 
   ls -l@ unpack.txt   --> look for file permissions
   xattr -l unpack.txt 
   mdls unpack.txt   --> File metadata
   cat unpack.txt 
================================================================================================

file UnPackNw

lipo - create or operate on universal files

$ lipo -info UnPackNw 
Non-fat file: UnPackNw is architecture: x86_64

$ lipo -detailed_info /usr/bin/perl
Fat header in: /usr/bin/perl
fat_magic 0xcafebabe
nfat_arch 2
architecture i386
    cputype CPU_TYPE_I386
    cpusubtype CPU_SUBTYPE_I386_ALL
    offset 4096
    size 29696
    align 2^12 (4096)
architecture x86_64
    cputype CPU_TYPE_X86_64
    cpusubtype CPU_SUBTYPE_X86_64_ALL
    offset 36864
    size 29952
    align 2^12 (4096)

$ lipo -detailed_info UnPackNw 
input file UnPackNw is not a fat file
Non-fat file: UnPackNw is architecture: x86_64

================================================================================================

pagestuff - Mach-O file page analysis tool

pagestuff displays information about the specified logical pages of a file conforming to the Mach-O executable format.
For each speci-fied page of code, symbols (function and static data structure names) are displayed.

pagestuff UnPackNw -a
File Page 0 contains Mach-O headers
File Page 1 contains contents of section (__TEXT,__text)
Symbols on file page 1 virtual address 0x100001570 to 0x100002000
  0x0000000100001570 _main
  0x00000001000015a0 -[AppDelegate applicationDidFinishLaunching:]
  
Interesting methods

$ pagestuff UnPackNw -a | grep -i delete
  0x00000001000016e0 -[AppDelegate deleteAppBySelf]

$ pagestuff UnPackNw -a | grep -i url
  0x0000000100002e30 -[AppDelegate silentlyFireUrl:]
  0x0000000100003060 -[AppDelegate getEncodedURL:searchString:]
  0x0000000100003360 -[AppDelegate encodeURL:]
  0x00000001000033c0 -[AppDelegate paramToUrl:param:value:]
  0x0000000100003460 -[AppDelegate makeParameterStringForURL:]
  
 ================================================================================================
 
  nm - display name list (symbol table)
  
  Nm displays the name list (symbol table) of each object file in the argument list.If an argument is an archive, a  listing  for  each
  object  file  in the archive will be produced.  File can be of the form libx.a(x.o),in which case only symbols from that member of the
  object file are listed.  (The parentheses have to be quoted to get by the shell.)  If no file  is  given,  the  symbols  in  a.out  are
  listed.

$ nm -m UnpackNw
0000000100004350 (__TEXT,__text) non-external +[EncodeDecodeOps encryptDecryptOperation:]
0000000100003d50 (__TEXT,__text) non-external +[EncodeDecodeOps encryptDecryptOperationNew:forDict:]

================================================================================================
Strings search gives some attribution of the creator 

$ strings - UnPackNw | grep -i  'Users\|http\'
grep: trailing backslash (\)
labmacs-Mac:MacOS labmac$ strings - UnPackNw | grep -i  'Users\|http'
http://trk.entiretrack.com/trackerwcfsrv/tracker.svc/trackOffersAccepted/?q=pxl=SRC4443_SRC4345_SRC2171&x-count=1&utm_source=srchofr3&lpid=0&utm_content=&utm_term=&x-base=&utm_medium=srchofr3&utm_publisher=srchofr3&offerpxl=&x-fetch=1&utm_campaign=%@&affiliateid=&x-at=&btnid=0
http://trk.entiretrack.com/trackerwcfsrv/tracker.svc/trackOffersAccepted/?q=pxl=SRC4351_SRC4253_SRC2113&x-count=1&utm_source=srchofr&lpid=0&utm_content=&utm_term=&x-base=&utm_medium=srchofr&utm_publisher=srchofr&offerpxl=&x-fetch=1&utm_campaign=%@&affiliateid=&x-at=&btnid=0
/Users/prasoon/Documents/maf/core/source/UnPack/UnPack/
/Users/PCV-MD6/Library/Developer/Xcode/DerivedData/UnPackNw-czburaqosecwanhagisghoosoegf/Build/Intermediates.noindex/UnPackNw.build/Debug/UnPackNw.build/Objects-normal/x86_64/main.o
/Users/PCV-MD6/Library/Developer/Xcode/DerivedData/UnPackNw-czburaqosecwanhagisghoosoegf/Build/Intermediates.noindex/UnPackNw.build/Debug/UnPackNw.build/Objects-normal/x86_64/AppDelegate.o
/Users/prasoon/Documents/maf/core/source/UnPack/UnPack/AppDelegate.h
/Users/PCV-MD6/Library/Developer/Xcode/DerivedData/UnPackNw-czburaqosecwanhagisghoosoegf/Build/Intermediates.noindex/UnPackNw.build/Debug/UnPackNw.build/Objects-normal/x86_64/EncodeDecodeOps.o

================================================================================================

grep 'word1\|word2\|word3' /path/to/file
### Search all text files ###
grep 'word*' *.txt
### Search all python files for 'wordA' or 'wordB' ###
grep 'wordA*'\''wordB' *.py
grep -E 'word1|word2' *.doc
grep -e string1 -e string2 *.pl
egrep "word1|word2" *.c

================================================================================================

otool - object file displaying tool

The otool command displays specified parts of object files or libraries.

  -L     Display the names and version numbers of the shared libraries that the object file uses, as well as the shared library ID if the
         file is a shared library.
         
  $ otool -L UnPackNw 
UnPackNw:
	/System/Library/Frameworks/WebKit.framework/Versions/A/WebKit (compatibility version 1.0.0, current version 606.1.36)
	/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1555.10.0)
	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.200.5)
	/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 1670.0.0)
	/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1555.10.0)
	/System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices (compatibility version 1.0.0, current version 933.0.0)
              
  Implement browser features via linking to the WebKit framework, something we’d expect in an adware type infection.   
  
   -o     Display the contents of the __OBJC segment used by the Objective-C run-time system.
   -V     Display the disassembled operands symbolically (this implies the -v option).  This is useful with the -t option.

$ otool -oV UnPackNw 
UnPackNw:
Contents of (__DATA,__objc_classlist) section
0000000100009ba0 0x10000b160 _OBJC_CLASS_$_AppDelegate
           isa 0x10000b138 _OBJC_METACLASS_$_AppDelegate
    superclass 0x0
         cache 0x0
        vtable 0x0
          data 0x10000aa78 (struct class_ro_t *)
                    flags 0x304 RO_HAS_CXX_STRUCTORS
                    
-t     Display the contents of the (__TEXT,__text) section.  With the -v flag, this disassembles the text.  With the -V flag,  it  also
              symbolically disassembles the operands.
              
$ otool -tV UnPackNw  | more
UnPackNw:
(__TEXT,__text) section
_main:
0000000100001570        pushq   %rbp
0000000100001571        movq    %rsp, %rbp
0000000100001574        subq    $0x10, %rsp
0000000100001578        movl    $0x0, -0x4(%rbp)
000000010000157f        movl    %edi, -0x8(%rbp)
0000000100001582        movq    %rsi, -0x10(%rbp)
0000000100001586        movl    -0x8(%rbp), %edi
0000000100001589        movq    -0x10(%rbp), %rsi
000000010000158d        callq   0x10000649a ## symbol stub for: _NSApplicationMain              
 
otool -tV UnPackNw  | grep "http"
0000000100002c40	leaq	0x6bf9(%rip), %rcx ## Objc cfstring ref: @"hxxp://trk[.]entiretrack[.]com/trackerwcfsrv/tracker.svc/trackOffersAccepted/?q=pxl=SRC4443_SRC4345_SRC2171&x-count=1&utm_source=srchofr3&lpid=0&utm_content=&utm_term=&x-base=&utm_medium=srchofr3&utm_publisher=srchofr3&offerpxl=&x-fetch=1&utm_campaign=%@&affiliateid=&x-at=&btnid=0"
0000000100002d80	leaq	0x6ad9(%rip), %rcx ## Objc cfstring ref: @"hxxp://trk[.]entiretrack[.]com/trackerwcfsrv/tracker.svc/trackOffersAccepted/?q=pxl=SRC4351_SRC4253_SRC2113&x-count=1&utm_source=srchofr&lpid=0&utm_content=&utm_term=&x-base=&utm_medium=srchofr&utm_publisher=srchofr&offerpxl=&x-fetch=1&utm_campaign=%@&affiliateid=&x-at=&btnid=0"


